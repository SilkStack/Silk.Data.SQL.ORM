using System;
using System.Collections.Generic;
using System.Linq;
using Silk.Data.Modelling;
using Silk.Data.SQL.ORM.Schema;

namespace Silk.Data.SQL.ORM.Modelling
{
	public abstract class EntityModelTransformer
	{
		public abstract IEntityField[] Fields { get; }
	}

	public class EntityModelTransformer<T> : EntityModelTransformer, IModelTransformer
	{
		private static readonly Type[] _autoIncrementTypes = new[]
		{
			typeof(ushort), typeof(short),
			typeof(uint), typeof(int),
			typeof(ulong), typeof(long)
		};

		public bool FieldsAdded { get; set; }

		public override IEntityField[] Fields => _entityFields.Values.ToArray();

		private string _entityTableName;
		private readonly List<Column> _entityColumns =
			new List<Column>();
		private readonly Dictionary<string, IEntityField> _entityFields =
			new Dictionary<string, IEntityField>();
		private readonly EntitySchemaOptions<T> _schemaOptions;
		private readonly SchemaBuilder _schemaBuilder;

		public EntityModelTransformer(EntitySchemaOptions<T> schemaOptions, SchemaBuilder schemaBuilder)
		{
			_schemaOptions = schemaOptions;
			_schemaBuilder = schemaBuilder;
		}

		private void ModelPrimitiveField<TData>(IField<TData> field, EntityFieldOptions options, string sqlColumnName)
		{
			var isIdField = field.FieldName.ToLowerInvariant() == "id";
			var isPrimaryKey = isIdField;
			var isAutoIncrement = false;
			var isAutoGenerated = false;
			if (options?.IsPrimaryKey == true)
				isPrimaryKey = true;

			if (isPrimaryKey)
			{
				if (options?.IsAutoGenerate == true || isIdField)
				{
					if (field.FieldType == typeof(Guid))
					{
						isAutoGenerated = true;
					}
					else if (_autoIncrementTypes.Contains(field.FieldType) || isIdField)
					{
						isAutoIncrement = true;
					}
				}
			}

			var column = new Column(sqlColumnName, SqlDataTypes.GetSqlDataType(field, options),
				isPrimaryKey: isPrimaryKey, isAutoIncrement: isAutoIncrement, isAutoGenerated: isAutoGenerated);

			_entityColumns.Add(column);
			_entityFields.Add(field.FieldName,
				new ValueField(field.FieldName, field.CanRead, field.CanWrite, false, null, column)
				);

			FieldsAdded = true;
		}

		public void VisitField<TData>(IField<TData> field)
		{
			if (!field.CanRead)
				return;

			var options = _schemaOptions.GetFieldOptions(field);
			var sqlColumnName = options?.ConfiguredColumnName;
			if (string.IsNullOrWhiteSpace(sqlColumnName))
				sqlColumnName = field.FieldName;

			if (_entityFields.ContainsKey(field.FieldName))
				return;

			if (!field.IsEnumerable)
			{
				if (SqlDataTypes.IsSQLPrimitiveType(field.FieldType))
				{
					ModelPrimitiveField(field, options, sqlColumnName);
				}
				//  todo: make a single object relationship if field.FieldType is registered in the schema
				//		otherwise recursively embed the type's fields
			}
			else
			{
				var relatedTypeTransformer = _schemaBuilder.GetModelTransformer(field.ElementType);
				if (relatedTypeTransformer == null)
				{
				}
				else
				{
					var primaryKeyField = relatedTypeTransformer.Fields.OfType<ValueField>()
						.FirstOrDefault(q => q.Column.IsPrimaryKey);
					if (primaryKeyField == null)
						return;
				}
			}
		}

		public void VisitModel<TField>(IModel<TField> model) where TField : IField
		{
			if (string.IsNullOrWhiteSpace(_entityTableName))
			{
				if (model is TypeModel typeModel)
					_entityTableName = typeModel.Type.Name;
				else
					throw new Exception("Table names can only be derived from TypeModels.");
			}
		}

		public EntityModel<T> GetEntityModel()
		{
			return new EntityModel<T>(_entityFields.Values.ToArray(),
				new Table(_entityTableName, _entityColumns));
		}
	}
}
